rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can read/write only their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Groups - members can read, only admins can update group details
    match /groups/{groupId} {
      allow read: if request.auth != null &&
                  exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
                  
      allow write: if request.auth != null &&
                   exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
                   get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin";
    }
    
    // Group members - nested collection for member management
    match /groups/{groupId}/members/{memberId} {
      // Members can see who else is in their group
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid));
      
      // Users can create their own member document when accepting an invitation
      allow create: if request.auth != null && 
                    memberId == request.auth.uid &&
                    (
                      // Either they have a pending invitation
                      exists(/databases/$(database)/documents/invites/$(getInviteForUser(request.auth.uid, groupId))) ||
                      // Or they are an admin (for creating the first member)
                      (
                        exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
                        get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin"
                      )
                    );
      
      // Only group admins can update or delete members
      allow update, delete: if request.auth != null && 
                           exists(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)) &&
                           get(/databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid)).data.role == "admin";
    }
    
    // Invites collection for group invitations
    match /invites/{inviteId} {
      // Anyone can read their own invitations (by email)
      allow read: if request.auth != null && 
                  get(/databases/$(database)/documents/invites/$(inviteId)).data.email == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email;
      
      // Users can update invitation status when accepting/declining
      allow update: if request.auth != null &&
                    get(/databases/$(database)/documents/invites/$(inviteId)).data.email == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.email &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']);
      
      // Only group admins can create invitations
      allow create: if request.auth != null &&
                    exists(/databases/$(database)/documents/groups/$(request.resource.data.groupId)/members/$(request.auth.uid)) &&
                    get(/databases/$(database)/documents/groups/$(request.resource.data.groupId)/members/$(request.auth.uid)).data.role == "admin";
    }
    
    // Helper function to find an invitation for a user and group
    function getInviteForUser(userId, groupId) {
      return query(/databases/$(database)/documents/invites, 
        where('email', '==', get(/databases/$(database)/documents/users/$(userId)).data.email),
        where('groupId', '==', groupId),
        where('status', '==', 'pending')).size() > 0;
    }
    
    // Videos - users can see videos from their groups, create their own
    match /videos/{videoId} {
      allow read: if request.auth != null && 
                  request.resource.data.groupIds.hasAny(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.groupIds);
      
      // Users can only upload videos as themselves
      allow create: if request.auth != null && request.resource.data.creator == request.auth.uid;
      
      // Only video creator can update or delete their videos
      allow update, delete: if request.auth != null && resource.data.creator == request.auth.uid;
    }
    
    // Reactions (comments, likes) - members of the group can interact
    match /reactions/{reactionId} {
      // Can read reactions to videos in groups they belong to
      allow read: if request.auth != null && 
                  exists(/databases/$(database)/documents/groups/$(getVideoGroup(resource.data.videoId))/members/$(request.auth.uid));
      
      // Can create reactions if they're in the group
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid &&
                    exists(/databases/$(database)/documents/groups/$(getVideoGroup(request.resource.data.videoId))/members/$(request.auth.uid));
      
      // Can only modify or delete their own reactions
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    // Helper function to get a video's group
    function getVideoGroup(videoId) {
      return get(/databases/$(database)/documents/videos/$(videoId)).data.groupIds[0];
    }
  }
}