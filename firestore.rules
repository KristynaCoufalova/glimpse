rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles - users can read/write only their own data
    match /users/{userId} {
      allow read: if request.auth != null;  // Allow any authenticated user to read profiles
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Groups - Using only embedded members approach
    match /groups/{groupId} {
      // Allow any authenticated user to read groups
      // This solves the permission issue for invitations
      allow read: if request.auth != null;
      
      // Allow creating new groups for any authenticated user
      allow create: if request.auth != null;
      
      // Allow updating groups if you're an admin (using only embedded members)
      allow update, delete: if request.auth != null && 
                          (resource.data.members is map && 
                           resource.data.members[request.auth.uid] is map && 
                           resource.data.members[request.auth.uid].role == "admin");
    }
    
    // Members subcollection - maintaining for backward compatibility
    match /groups/{groupId}/members/{memberId} {
      allow read: if request.auth != null;
      
      // Allow write operations required for backward compatibility:
      // 1. When creating a group (memberId matches user's uid)
      // 2. When accepting an invitation (memberId matches user's uid)
      allow write: if request.auth != null && 
                  request.auth.uid == memberId;
    }
    
    // Videos - users can see videos from their groups, create their own
    match /videos/{videoId} {
      // Allow any authenticated user to read videos
      allow read: if request.auth != null;
      
      // Users can only upload videos as themselves
      allow create: if request.auth != null && request.resource.data.creator == request.auth.uid;
      
      // Only video creator can update or delete their videos
      allow update, delete: if request.auth != null && resource.data.creator == request.auth.uid;
    }
    
    // Invites - Allow users to create and read invites
    match /invites/{inviteId} {
      // Anyone can create invites (we'll control this in the app logic)
      allow create: if request.auth != null;
      
      // Anyone can read invites (for debugging, you can make this more restrictive later)
      allow read: if request.auth != null;
      
      // Anyone can update invites (for accepting/declining)
      allow update: if request.auth != null;
                    
      // You can delete invites if you're the sender
      allow delete: if request.auth != null && 
                    resource.data.invitedBy == request.auth.uid;
    }
    
    // Reactions (comments, likes) - members of the group can interact
    match /reactions/{reactionId} {
      // Any authenticated user can read reactions
      allow read: if request.auth != null;
      
      // Can create reactions if they're the authenticated user
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid;
      
      // Can only modify or delete their own reactions
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}